.TH "pmerge" 1 "January 2019" "ONICS 1.0"
.SH NAME
pmerge - Interleave multiple packets into one stream
.P
.SH SYNOPSYS
\fBpsplit\fP [\fB-BchPrRT\fP] [\fB-n\fP \fInumpkts\fP]
[\fB-s\fP \fIseed\fP] \fIfile\fP [\fIfile\fP ...]
.P
.SH DESCRIPTION
The \fBpmerge\fP utility reads in packets in xpkt format from a set of
files and interleaves their packets before writing them out to standard
output.  This is primarily used to merge multiple packet files into
one coherent stream of traffic.  However, \fBpmerge\fP can also generate
a larger stream of packets from one or more smaller xpkt files.  If the
\fB-c\fP option is present, \fBpmerge\fP will keep rewinding the input
files after reaching each file end outputting packets indefinitely.  The
\fB-n\fP option can bound the total number of packets that \fBpmerge\fP
outputs.
.P
The \fBpmerge\fP program can merge the input files deterministically or
randomly.  Deterministic merging is the default.  The \fB-r\fP option
instructs \fBpmerge\fP to randomly select the file from which to pull
the next packet.  However, \fBpmerge\fP will always pull packets from a
given file in order. The \fB-B\fP, \fB-P\fP, \fB-R\fP and \fB-T\fP
options determine the scheduling criteria used to determine the next
file from which to pull the next packet.
.P
By default (or when the \fB-R\fP option is given), \fBpmerge\fP
schedules the files round-robin alternating packets from each file
in turn.  When randomized, \fBpmerge\fP selects the next file randomly
with each file having equal weight.
.P
The \fB-P\fP option instructs pmerge to schedule files proprotional to
the number of packets in each file.  This will generally result in
\fBpmerge\fP spacing the packets from a given input file evenly in the
output stream.  If \fB-r\fP is present then \fBpmerge\fP selects the
next file from which to pull a packet randomly, but weights each file by
the number of packets in the file.
.P
The \fB-B\fP option instructs pmerge to schedule files proprotional to
the number of bytes in each input file.  This generally results in an
output stream where windows of packets in the output stream contain
packet data in roughly the same size proportions as the size proportions
of the input files.  When \fB-r\fP is present, \fBpmerge\fP selects the
next file from which to pull a packet randomly, but weights each file by
the total size of the packets in the input file.
.P
The \fB-T\fP option instructs pmerge to schedule packets from the files
in timestamp order. It assumes that the packets within each file are
already ordered by timestamp.  This option can be useful for merging
traces collected from different points in the network into a single
file.  The \fBpmerge\fP utility will skip (with a warning) any packets
lacking a timestamp or whose timestamp goes backwards in time from
preceding packets in the same file.  The \fB-T\fP option can not be used
with either the \fB-c\fP option or the \fB-r\fP option.
.P
When\fBpmerge\fP arrives at the end of an input file, (unless the
\fB-c\fP option is present) the file scheduling for the remaining
traffic is rebalanced according to the remaining active files.  So,
for example, if round-robin scheduling is in use, and file A has 2
packets, file B has 4 packets and file C has 6, the output stream
will look roughly like this:
.nf
	A1 B1 C1 A2 B2 C2 B3 C3 B4 C4 C5 C6
.fi
.P
.SH OPTIONS
.IP \fB-B\fP
Schedule each file proportional to the number of packet bytes in the
input file.  (This excludes the size of XPKT headers.)
.IP \fB-c\fP
Continuously send packets rewinding each input file after reaching the
end-of-file.
.IP \fB-h\fP
Print help for the command and exit.
.IP "\fB-n\fP \fInumpkts\fP"
Send at most \fInumpkts\fP packets.
.IP \fB-P\fP
Schedule each file proportional to the number of packets in the input
file.
.IP \fB-r\fP
Randomize file selection.
.IP \fB-R\fP
Schedule files round-robin.  In other words, each file has equal
weight when scheduling.
.IP "\fB-s\fP \fIseed\fP"
Seed the random number generation for the \fB-r\fP option by the integer
\fIseed\fP.
.IP \fB-T\fP
Merge the files in order by the timestamps on the packets.  (Note that
the packets must already be in ascending order by timestamp within their
respective files.)
.P
.SH EXAMPLES
Interleave the packets of two input files round-robin and write to an
outfile.
.nf

	pmerge in1.xpkt in2.xpkt > out.xpkt

.fi
Generate a trace file of 100 packets from 3 packet files with each
file scheduled proportional to the number of packets.
.nf

	pmerge -cPn 100 in1.xpkt in2.xpkt in3.xpkt > out.xpkt

.fi
Expand a single trace file into a new one with 1000 packets.
.nf

	pmerge -c -n 1000 in.xpkt > out.xpkt

.fi
Continously generate a traffic from a set of 4 files with the traffic
scheduled randomly, but with each file taking up space in the traffic
roughly proportional to the number of bytes in each input file.  Send
each packet 100 microseconds after the previous one.
.nf

	pmerge -cPr in1.xpkt in2.xpkt in3.xpkt in4.xpkt |
	    pktrel -i 0.0001 | pktout eth0

.fi
Merge packets from two separate traces by timestamp order into a single
file.
.nf

	pmerge -T in1.xpkt in2.xpkt > merged.xpkt

.fi
.SH AVAILABILITY
This utility should be available on all supported ONICS platforms.
.P
.SH AUTHOR
Christopher A. Telfer <ctelfer@gmail.com>
.P
.SH "SEE ALSO"
pktrel(1), pktout(1), psort(1), psplit(1), pml(1)
