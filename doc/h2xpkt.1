.TH "h2xpkt" 1 "May 2016" "ONICS 1.0"
.SH NAME
h2xpkt - Convert a stream of packets from HEXPKT format XPKT.
.P
.SH SYNOPSYS
\fBh2xpkt\fP [\fB-fhs\fP] [\fB-l\fP \fIdltype\fP]
[\fIinfile\fP [\fIoutfile\fP]]
.P
.SH DESCRIPTION
\fBh2xpkt\fP reads in a stream of packets in \fBhexpkt\fP format and
them in XPKT format.  By default \fBh2xpkt\fP reads the packets from
standard input and outputs them to standard output.  If \fIinfile\fP is
present then \fBh2xpkt\fP reads from it instead.  If \fIinfile\fP is
"-", then h2xpkt still reads from standard input (this just allows
reading from standard input but specifying the output file). If
\fIoutfile\fP is present, then \fBh2xpkt\fP opens, creates and
truncates that file before writing its output to that file.
.P
.SH OPTIONS
.IP \fB-f\fP
Flush the output for a packet after each packet is read.  This can be
useful if packets are coming in live and subsequent programs should
receive input packets in a timely manner.
.IP \fB-h\fP
Print the usage of the command and exit.
.IP \fB-s\fP
Use strict address checking.  In this mode, all non-comment, non-blank
lines must start with an address and the address must be the next
address expected for a given packet.
.IP "\fB-l\fP \fIdltype\fP"
The input stream of packets does not contain XPKT headers.  Instead each
packet starts with the first header in the packet.  For each packet, the
protocol of the first PDU in the packet is \fIdltype\fP specified by
protocol name or as an ONICS prototocol ID (PRID).  This mode of
operation allows reading packets from hex dumps produced by other
programs so long as each packet's hex dump is separated by a blank line
from the next packet.
.P
.SH "HEXPKT FORMAT"
.P
The \fBhexpkt\fP format is a fairly typical hexadecimal representation
of binary data that is used by various tools.  Each blank line or line
that starts with a '#' is ignored entirely.  Every other line should
have the form:
.nf

	[\fIaddress\fP:] \fIhex\fP [\fIhex\fP ...] [\fInonhex\fP] [\fIany\fP...]

.fi
The \fIaddress\fP (if present) is specified in hexadecimal.  It
specifies the offset in the file where the data on the rest of the line
should reside.  Following the address and colon character, are a series
of pairs of hexadecimal digits.  These hexadecimal digit pairs can have
spaces between them or not.  The h2xpkt program will skip any "0x"
prefixes to either the address or the hex digits..  It will also assume
that every value starting with hexadecimal digits (including decimal and
octal numbers) are actually hexadecimal numbers.  Any non-space,
non-hexadecimal character on the line ends parsing until the end of the
line: h2xpkt ignores said character and all characters remaining in the
line.
.P
The \fBhexpkt\fP format imposes two additional rules for the hex dump
that is not present in other dumps.  First, packets are delimited by
blank lines and so must not contain any blank lines within them.
Second, addresses are relative to the start of a packet.  Thus,
addresses in a \fBhexpkt\fP stream 'reset' after every blank line
(i.e. the start of each new packet).
.P
.SH EXAMPLES
.P
Convert a hexpkt dump to XPKT:
.nf

    h2xpkt infile.hpkt outfile.xpkt

.fi
An alternate version of pcapin(1) using tcpdump.  Note that in this
form, we assume that the datalink type is ethernet.  Also note that the
'\fB\\t\fP' in the \fBegrep\fP command should be replaced by a literal
tab character (often CTRL-v followed by TAB).  Note that the "cut"
command here prunes the "readable" portion of the tcpdump in case that
section starts with hexadecimal characters.
.nf

    tcpdump -nvvvvXXXXes 0 -r infile.pcap | 
        egrep '(^[ \\t]*0x|^$)' | 
        cut -c 1-50 |
        h2xpkt -l eth > outfile.xpkt

.fi
.P
.SH AVAILABILITY
This utility should be available on all supported ONICS platforms.
.P
.SH AUTHOR
Christopher A. Telfer <ctelfer@gmail.com>
.P
.SH "SEE ALSO"
h2xpkt(1), pc2xpkt(1), xpkt2pc(1), pcapin(1), pcapout(1)
