.TH "onics" 7 "March 2015" "ONICS 1.0"
.SH NAME
ONICS - Open Network Inspection Command Suite
.P
.SH SYNOPSYS
\fBpackage onics\fP
.P
.SH DESCRIPTION
\fBONICS\fP is a command line tool suite along with the code building
blocks for those tools to capture, dissect, manipulate and send network
data.  The tool suite currently consists of 21 binaries and 22 scripts
built on those programs.  The idea is for these utilities to be the
equivalent of programs like grep, sed, awk, etc. for packets instead of
lines of text.  The programs, as a rule use the XPKT format for packet
encapsulation (see below).  But there are utilities to move data in and
out of that format to make it easy to integrate with other tools.  Most
of the programs work on both packet traces as well as live traffic. 
.P
.SH PROGRAMS
.P
.IP \fBethwrap\fP
Wrap a packet in an Ethernet header.
.IP \fBh2xpkt\fP
Convert a hex packet to an XPKT.
.IP \fBicmp6wrap\fP
Wrap a packet in an ICMPv6 header.
.IP \fBicmpwrap\fP
Wrap a packet in an ICMP header.
.IP \fBip6wrap\fP
Wrap a packet in an IPv6 header.
.IP \fBipfrag\fP
Fragment IPv4 or IPv6 packets.
.IP \fBipreasm\fP
Reassemble IPv4 or IPv6 packets.
.IP \fBipwrap\fP
Wrap a packet in an IP header.
.IP \fBmkarp\fP
Create a simple ARP|Ethernet packet.
.IP \fBmkicmp\fP
Create a simple ICMP|IPv4|Ethernet packet.
.IP \fBmkicmp6\fP
Create a simple ICMPv6|IPv6|Ethernet packet.
.IP \fBmktcp\fP
Create a simple TCP|IPv4|Ethernet packet.
.IP \fBmktcp6\fP
Create a simple TCP|IPv6|Ethernet packet.
.IP \fBmkudp\fP
Create a simple UDP|IPv4|Ethernet packet.
.IP \fBmkudp6\fP
Create a simple UDP|IPv6|Ethernet packet.
.IP \fBnft\fP
Track flows in a series of packets.
.IP \fBnvmas\fP
Assembler for the NetVM.
.IP \fBnvmpf\fP
Command-line runtime for the NetVM.
.IP \fBpc2xpkt\fP
Convert PCAP files to XPKT files.
.IP \fBpcapin\fP
Read in PCAP files or from interfaces using libpcap.
.IP \fBpcapout\fP
Write to PCAP files or to interfaces using libpcap.
.IP \fBpcount\fP
Count the number of packets in a packet stream.
.IP \fBpdiff\fP
Compute the difference between two packet traces.
.IP \fBpeseq\fP
Embed sequence numbers into a packet stream.
.IP \fBpktdemux\fP
Demultiplex a stream of packets to separate stream.
.IP \fBpktin\fP
Read packets in from an interface.
.IP \fBpktmux\fP
Multiplex a set of streams of packets into a single stream.
.IP \fBpktout\fP
Write packets out to an interface.
.IP \fBpktrel\fP
Release packets at time intervals based on their timestamps.
.IP \fBpml\fP
Packet Manipulation Language interpeter: like sed(1) or awk(1) for
packets.
.IP \fBpgrep\fP
Select a subset of packets from a packet stream.
.IP \fBpreverse\fP
Reverse a set of packets.
.IP \fBpsort\fP
Sort a set of packets according to user-specified keys.
.IP \fBpsplit\fP
Split a set of packets into separate trace files.
.IP \fBptail\fP
Pass through the last N packets in a stream.
.IP \fBpxseq\fP
Extract sequence numbers from a stream of packets.
.IP \fBrawpkt\fP
Wrap a raw data into an XPKT format.
.IP \fBtcpsess\fP
Generate a full TCP stream from a set of files.
.IP \fBtcpwrap\fP
Wrap a packet in an TCP header.
.IP \fBudpwrap\fP
Wrap a packet in an UDP header.
.IP \fBx2hpkt\fP
Convert a stream of XPKT packets to hex packets.
.IP \fBxpkt2pc\fP
Convert a stream of XPKT packets to a PCAP trace file.
.IP \fBxtsscale\fP
Scale the inter-arrival times in the timestamps in a stream of packets.
.P
.SH BUILDING BLOCKS
.P
ONICS uses some common software components that are useful when building
other tools.  Here are a few of the more noteworthy ones.
.IP \fBXPKT\fP
This is an external, extensible packet representation.  This format aims
to replace PCAP.  It does not include a per-file header: each packet
stands by itself.  Therefore  XPKT files can simply be 'cat'ed together
to form new XPKT files.  The format has various optional extension
headers to allow tagging packets with different types of metadata.
.IP \fBProtoparse\fP
This is an API for protocol parsers.  The user must write C code against
a specific API for each protocol that the system will parse.  Once
written, all tools in ONICS will be able to parse said protocol.  The
code parses a packet into a tree of protocol data units (PDUs).  Each
parse describes the PDU as a series of offsets into the packet buffer.
Offsets can be invalid to indicate that a field isn't present.  A parse
describes variable length fields by a pair of offsets (start and end).
All protocols have 4 common offsets:  start (header) offset, payload
offset, trailer offset, end offset.  This abstraction allows the library
to insert, remove or shift data in a packet buffer without having to
understand any of the internal logic for decoding a protocol.  Such
operations can automatically update the PDUs and leave them in a
consistent state.
.IP "\fBProtocol Namespace and Protocol Field Library\fP"
These two APIs provide  the next layer of abstraction built on the
protoparse library.  The protocol namespace API  provides a mapping
between named fields and offsets into a packet buffer based on offsets
in a protocol parse.   It also allows the programmer to define important
constants and patterns in the same namespace.  The protocol field
library provides a programmer with functions to enumerate, read and set
packet fields by name based on the protoparse and protocol namespace
libraries.
.IP \fBNetVM\fP
This is an embedded, stack-based virtual machine that has special
instructions and addressing modes for dealing with network packets.  The
NetVM is aware of the protocol parses that the protoparse library
produces for a packet and can therefore address fields in the packet
based on that parse information.  It also supports bulk move operations,
bulk string and masked string matching, and a virtual coprocessor API to
allow easy extension.  The version of the NetVM runtime that the 'pml'
and 'nvmpf' programs run has coprocessor support for regex pattern
matching, formatted printing and access to XPKT metadata tags.  The
instruction has a load-time verifiable subset.  This allows one to run
NetVM programs in an environment and know that the program will behave
predictably and terminate in a fixed amount of time.   Even when running
in non-verifiable mode all instructions and operations are checked for
safety preventing any corruption of the runtime's state.  NetVM uses a
segmented memory model with read/write/execute permissions.  The NetVM
used in the current tool set only refers to segments of private memory:
i.e. no access is shared with program itself making it impossible to
corrupt interpreter state.
.P
.SH EXAMPLES
.P
There are many more examples in the manpages for the individual tools.
However, this should give you an idea of how the tools are designed
to be used.
.P
For example, to generate a TCP packet with a payload of "hello world"
and send it out eth0 you would run:
.nf

  echo "hello world" | mktcp | pktout eth0

.fi
.P
This example does the same, but builds it up protocol layer by layer.
.nf

  echo "hello world" | rawpkt | tcpwrap | ipwrap | 
       ethwrap | pktout eth0

.fi
To read packets from the network, extract those going to host
192.168.0.3 port 443, keep a running count of the number captured and
write them to a packet trace file you could run:
.nf

  pktin eth0 | 
    pgrep "ip and tcp and ip.daddr == 192.168.0.3 and tcp.dport == 443" | 
    pcount -s 5 > outfile

.fi
To toggle the Don't Fragment bit of every packet in a trace file you
could run:
.nf

  pml -e '?- ip -? { ip.df = ip.df ^ 1; fix_csums(0); }' infile outfile

.fi
To examine the difference between the files to see what changed:
.nf

  pdiff infile outfile | less

.fi
.P
.SH AUTHOR
Christopher A. Telfer <ctelfer@gmail.com>
.P
.SH "SEE ALSO"
ethwrap(1), h2xpkt(1), icmp6wrap(1), icmpwrap(1), ip6wrap(1), ipfrag(1),
ipreasm(1), ipwrap(1), mkarp(1), mkicmp(1), mkicmp6(1), mktcp(1), mktcp6(1),
mkudp(1), mkudp6(1), nft(1), nvmas(1), nvmpf(1), onics_proto(7), pc2xpkt(1),
pcapin(1), pcapout(1), pcount(1), pdiff(1), peseq(1), pgrep(1), pktdemux(1),
pktin(1), pktmux(1), pktout(1), pktrel(1), pml(1), preverse(1), psort(1),
psplit(1), ptail(1), pxseq(1), rawpkt(1), tcpsess(1), tcpwrap(1), udpwrap(1),
x2hpkt(1), xpkt2pc(1), xtsscale(1)

