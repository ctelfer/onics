#!/bin/sh
#
# ONICS
# Copyright 2013-2019
# Christopher Adam Telfer
#
# tcpsess - Generate a partial or complete TCP session from files.
#
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


CADDR=${CADDR:-"1.2.3.4"}
CPORT=${CPORT:-31337}
CSEQ=${CSEQ:-1}
CACK=0

SADDR=${SADDR:-"4.5.6.7"}
SPORT=${SPORT:-80}
SSEQ=${SSEQ:-1}
SACK=0

MSS=${MSS:-1460}

DOSYN=1
DOFIN=1

usage() {
	echo usage: $0 "[-S] [-F] [-m|-M <mod> ...] [-c|-s file2...]" >&2
	echo "    -S -- skip SYN handshake"
	echo "    -F -- skip FIN handshake"
	echo "    -m -- client packet modifications"
	echo "    -M -- server packet modifications"
	echo "    -c -- data sent by the client"
	echo "    -s -- data sent by the server"
	exit 1
}


SYN="tcp.syn = 1; tcp.ack = 0;"
SYNACK="tcp.syn = 1; tcp.ack = 1;"
ACK="tcp.ack = 1;"
ACKPSH="tcp.psh = 1; tcp.ack = 1;"
FINACK="tcp.fin = 1; tcp.ack = 1;"
CMODS=""
SMODS=""


# $1 = seq, $2 = amt
seqadd() {
	expr \( $1 \+ $2 \) \& 0xFFFFFFFF
}


# $1 = dir, $2 = flags, $3 = file, $4 = off, $5 = len
gendpkt() {
	if [ $1 -eq 0 ]
	then
		dd if=$3 bs=1 skip=$4 count=$5 2>/dev/null | mktcp - \
			"tcp.seqn = $CSEQ; tcp.ackn = $CACK; " \
			"tcp.sport = $CPORT; tcp.dport = $SPORT; " \
			"tcp.win = 65535; $2 " \
			"ip.saddr = $CADDR; ip.daddr = $SADDR; " \
			"ip.ttl = 64; " \
			"$CMODS fix_lens(0); fix_csums(0); "
	else
		dd if=$3 bs=1 skip=$4 count=$5 2>/dev/null | mktcp - \
			"tcp.seqn = $SSEQ; tcp.ackn = $SACK; " \
			"tcp.sport = $SPORT; tcp.dport = $CPORT; " \
			"tcp.win = 65535; $2 " \
			"ip.saddr = $SADDR; ip.daddr = $CADDR; " \
			"ip.ttl = 64; " \
			"$SMODS fix_lens(0); fix_csums(0); "
	fi
}


# $1 = dir, $2 = flags
gencpkt() {
	if [ $1 -eq 0 ]
	then
		mktcp -- "tcp.seqn = $CSEQ; tcp.ackn = $CACK; " \
			 "tcp.sport = $CPORT; tcp.dport = $SPORT; " \
			 "tcp.win = 65535; $2 " \
			 "ip.saddr = $CADDR; ip.daddr = $SADDR; " \
			 "ip.ttl = 64; " \
			 "$CMODS fix_lens(0); fix_csums(0); "
	else
		mktcp -- "tcp.seqn = $SSEQ; tcp.ackn = $SACK; " \
			 "tcp.sport = $SPORT; tcp.dport = $CPORT; " \
			 "tcp.win = 65535; $2 " \
			 "ip.saddr = $SADDR; ip.daddr = $CADDR; " \
			 "ip.ttl = 64; " \
			 "$SMODS fix_lens(0); fix_csums(0); "
	fi
}


conn_open() {
	gencpkt 0 "$SYN"

	SACK=`seqadd $CSEQ 1`

	gencpkt 1 "$SYNACK"

	CSEQ=$SACK
	CACK=`seqadd $SSEQ 1`

	gencpkt 0 "$ACK"

	SSEQ=$CACK
}



conn_close() {
	gencpkt 0 "$FINACK"

	SACK=`seqadd $CSEQ 1`

	gencpkt 1 "$ACK"

	CSEQ=$SACK

	gencpkt 1 "$FINACK"

	CACK=`seqadd $SSEQ 1`

	gencpkt 0 "$ACK"

	SSEQ=$CACK
}


# $1 = filename, $2 = dir, $3 = ackdir, $4 = off, $5 = size
sendackdata() {
	gendpkt $2 "$ACK" $1 $4 $5
	if [ $2 -eq 0 ] ; then
		SACK=`seqadd $CSEQ $5`
	else
		CACK=`seqadd $SSEQ $5`
	fi
	gencpkt $3 "$ACK"
	if [ $2 -eq 0 ] ; then
		CSEQ=$SACK
	else
		SSEQ=$CACK
	fi
}


# $1 = filename, $2 = dir
senddata() {
	[ ! -f $1 ] && echo "file not found: $1" >&2 && exit 1
	SIZE=`ls -l $1 | awk '{print $5}'`
	ACKDIR=0
	[ $2 -eq 0 ] && ACKDIR=1

	X=0
	while [ $SIZE -gt $MSS ]
	do
		sendackdata $1 $2 $ACKDIR $X $MSS
		X=`expr $X \+ $MSS`
		SIZE=`expr $SIZE - $MSS`
	done
	sendackdata $1 $2 $ACKDIR $X $SIZE
}


# parse the global options
while [ $# -gt 0 ]
do

	if [ $1 = "-h" ] 
	then
		usage
	elif [ $1 = "-m" ] 
	then
		[ $# -lt 2 ] && usage
		CMODS="$CMODS $2"
	elif [ $1 = "-M" ]
	then
		[ $# -lt 2 ] && usage
		SMODS="$SMODS $2"
	elif [ $1 = "-S" ]
	then
		DOSYN=0
	elif [ $1 = "-F" ]
	then
		DOFIN=0
	else
		break
	fi

	shift
	shift
done



# generate the 3whs
[ $DOSYN -gt 0 ] && conn_open



# generate the actual payload data
while [ $# -gt 0 ]
do
	if [ $1 = "-c" ] 
	then
		[ $# -lt 2 ] && usage
		senddata $2 0
	elif [ $1 = "-s" ]
	then
		[ $# -lt 2 ] && usage
		senddata $2 1
	else
		usage
	fi

	shift
	shift

done


# generate the 4w shutdown
[ $DOFIN -gt 0 ] && conn_close
