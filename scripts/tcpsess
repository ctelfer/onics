#!/bin/sh


IPAC=${IPAC:-"1.2.3.4"}
CPORT=${CPORT:-31337}
SEQC=${ISNC:-1}
ACKC=0

IPAS=${IPAS:-"4.5.6.7"}
SPORT=${SPORT:-80}
SEQS=${ISNS:-1}
ACKS=0

DOSYN=1
DOFIN=1

usage() {
	echo usage: $0 "[-S] [-F] [-m|-M <mod> ...] [-c|-s file2...]" >&2
	echo "    -S -- skip SYN handshake"
	echo "    -F -- skip FIN handshake"
	echo "    -m -- client packet modifications"
	echo "    -M -- server packet modifications"
	echo "    -c -- data sent by the client"
	echo "    -s -- data sent by the server"
	exit 1
}


SYN="tcp.syn = 1;"
SYNACK="tcp.syn = 1; tcp.ack = 1;"
ACK="tcp.ack = 1;"
ACKPSH="tcp.psh = 1; tcp.ack = 1;"
FINACK="tcp.fin = 1; tcp.ack = 1;"
CMODS=""
SMODS=""


# $1 = seq, $2 = amt
seqadd() {
	expr \( $1 \+ $2 \) \& 0xFFFFFFFF
}


# $1 = dir, $2 = flags, $3 = file, $4 = off, $5 = len
genopkt() {
	if [ $1 -eq 0 ]
	then
		dd if=$3 bs=1 skip=$4 count=$5 2>/dev/null | rawpkt |
			tcpwrap "tcp.seqn = $SEQC; tcp.ackn = $ACKC; " \
				"tcp.sport = $CPORT; tcp.dport = $SPORT; " \
				"tcp.win = 65535; $2 " |
			ipwrap "ip.saddr = $IPAC; ip.daddr = $IPAS; " \
			       "ip.ttl = 64; " |
			ethwrap "$CMODS fix_all_len(0); fix_all_csum(0); "
	else
		dd if=$3 bs=1 skip=$4 count=$5 2>/dev/null | rawpkt |
			tcpwrap "tcp.seqn = $SEQS; tcp.ackn = $ACKS; " \
				"tcp.sport = $SPORT; tcp.dport = $CPORT; " \
				"tcp.win = 65535; $2 " |
			ipwrap "ip.saddr = $IPAS; ip.daddr = $IPAC; " \
			       "ip.ttl = 64; " |
			ethwrap "$SMODS fix_all_len(0); fix_all_csum(0); "
	fi
}


# $1 = dir, $2 = flags, $3 = file
genfpkt() {
	if [ $1 -eq 0 ]
	then
		rawpkt $3 |
			tcpwrap "tcp.seqn = $SEQC; tcp.ackn = $ACKC; " \
				"tcp.sport = $CPORT; tcp.dport = $SPORT; " \
				"tcp.win = 65535; $2 " |
			ipwrap "ip.saddr = $IPAC; ip.daddr = $IPAS; " \
			       "ip.ttl = 64; " |
			ethwrap "$CMODS fix_all_len(0); fix_all_csum(0); "
	else
		rawpkt $3 |
			tcpwrap "tcp.seqn = $SEQS; tcp.ackn = $ACKS; " \
				"tcp.sport = $SPORT; tcp.dport = $CPORT; " \
				"tcp.win = 65535; $2 " |
			ipwrap "ip.saddr = $IPAS; ip.daddr = $IPAC; " \
			       "ip.ttl = 64; " |
			ethwrap "$SMODS fix_all_len(0); fix_all_csum(0); "
	fi
}


# $1 = dir, $2 = flags
gencpkt() {
	genfpkt "$1" "$2" /dev/null
}


conn_open() {
	gencpkt 0 "$SYN"

	ACKS=`seqadd $SEQC 1`

	gencpkt 1 "$SYNACK"

	SEQC=$ACKS
	ACKC=`seqadd $SEQS 1`

	gencpkt 0 "$ACK"

	SEQS=$ACKC
}



conn_close() {
	gencpkt 0 "$FINACK"

	ACKS=`seqadd $SEQC 1`

	gencpkt 1 "$ACK"

	SEQC=$ACKS

	gencpkt 1 "$FINACK"

	ACKC=`seqadd $SEQS 1`

	gencpkt 0 "$ACK"

	SEQS=$ACKC
}


# $1 = filename, $2 = dir
senddata() {
	[ ! -f $1 ] && echo "file not found: $1" >&2 && exit 1

	SIZE=`ls -l $1 | awk '{print $5}'`

	ACKDIR=0
	[ $2 -eq 0 ] && ACKDIR=1

	if [ $SIZE -le 1460 ]
	then
		genfpkt $2 "$ACK" $1
		ACKS=`seqadd $SEQC $SIZE`
		gencpkt $ACKDIR "$ACK"
		SEQC=$ACKS
	else

		X=0
		while [ $SIZE -gt 1460 ]
		do
			genopkt $2 "$ACK" $1 $X 1460
			ACKS=`seqadd $SEQC 1460`
			gencpkt $ACKDIR "$ACK"
			SEQC=$ACKS

			X=`expr $X \+ 1460`
			SIZE=`expr $SIZE - 1460`
		done

		genopkt $2 "$ACK" $1 $X $SIZE
		ACKS=`seqadd $SEQC $SIZE`
		gencpkt $ACKDIR "$ACK"
		SEQC=$ACKS
	fi
}


# parse the global options
while [ $# -gt 0 ]
do

	if [ $1 = "-h" ] 
	then
		usage
	elif [ $1 = "-m" ] 
	then
		[ $# -lt 2 ] && usage
		CMODS="$CMODS $2"
	elif [ $1 = "-M" ]
	then
		[ $# -lt 2 ] && usage
		SMODS="$SMODS $2"
	elif [ $1 = "-S" ]
	then
		DOSYN=0
	elif [ $1 = "-F" ]
	then
		DOFIN=0
	else
		break
	fi

	shift
	shift
done



# generate the 3whs
[ $DOSYN -gt 0 ] && conn_open



# generate the actual payload data
while [ $# -gt 0 ]
do
	if [ $1 = "-c" ] 
	then
		[ $# -lt 2 ] && usage
		senddata $2 0
	elif [ $1 = "-s" ]
	then
		[ $# -lt 2 ] && usage
		senddata $2 1
	else
		usage
	fi

	shift
	shift

done


# generate the 4w shutdown
[ $DOFIN -gt 0 ] && conn_close
