#########
Initializing parse data structures
#########
#########
Starting Parse
#########


########
Done parsing, destroying scanner and parser
########


########
Optimizing tree:
########
Done... printing optimized tree
Printing PML Abstract Syntax Tree
-----------
Variables
-----------
   Variable: mem [global; width=56, addr=0]
   Variable: X [const; width=8, addr=0]
      Initialization value -- 
      Scalar [[c]; width=8] -- width 8: 53 (53,0x35)
   Variable: Y [const; width=8, addr=0]
      Initialization value -- 
      Scalar [[c,p]; width=8] -- width 8: 212 (212,0xd4)
   Variable: Global [global; width=8, addr=48]
   Variable: another_global [global; width=40, addr=0]
      Initialization value -- 
      Byte string [[c]; width=0] -- 
      11 bytes in read-only segment at address 0
      68656c6c6f20776f
      726c64
   Variable: broadcast_var [global; width=4, addr=40]
      Initialization value -- 
      Byte string [[c,p]; width=4] -- 
      4 bytes in read-only segment at address 12
      ffffffff
-----------
Functions
-----------
   Function[intrinsic]: sref_len() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=16, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: sref_addr() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=16, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: sref_ispkt() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=16, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: sref_seg() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=16, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: sref_isnull() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=16, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: pkt_new() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: len [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_swap() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pndst [param; width=8, addr=0]
      Variable: pnsrc [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_copy() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pndst [param; width=8, addr=0]
      Variable: pnsrc [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_del() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: pkt_ins_u() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_ins_d() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_cut_u() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_cut_d() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_parse() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_push_back() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: prid [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: parse_pop_back() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_push_front() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: prid [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: parse_pop_front() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_update() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_dltype() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_len() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_all_len() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_csum() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_all_csum() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_tstamp() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_tstamp() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_presnap() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_presnap() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_inport() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_inport() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_outport() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_outport() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_flowid() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_flowid() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_class() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_class() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: pop() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num [param; width=8, addr=0]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: log2() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num [param; width=8, addr=0]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: min() -- 2 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num1 [param; width=8, addr=0]
      Variable: num2 [param; width=8, addr=1]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: max() -- 2 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num1 [param; width=8, addr=0]
      Variable: num2 [param; width=8, addr=1]
   Body -- 
      (null)
-----------
Begin Rule
-----------
   (null)
-----------
Packet Rules
-----------
   Rule: (packet)
   Pattern -- 
      Binary Operation: 'match' [[]; width=8]
      Left Operand -- 
         Locator: packet field(ip.saddr) [[]; width=4]
         Packet field
      Right Operand -- 
         Masked Pattern [[c]; width=0] 
         Value --
         4 bytes in read-only segment at address 16
         7f000000
         Mask --
         4 bytes in read-only segment at address 20
         ffffff00
   Action Variables -- 
      Variable: x [local; width=8, addr=0]
   Action -- 
      List:
      -----
      Print Statement: type: string, width:0, flags:[]
      Expression -- 
         Byte string [[c]; width=0] -- 
         2 bytes in read-only segment at address 24
         6869
      -----
      Print Statement: type: signed decimal, width:0, flags:[]
      Expression -- 
         Locator: variable(x) [[]; width=8]
         Variable -- 
            Variable: x [local; width=8, addr=0]
      -----
   Rule: (packet)
   Empty pattern
   Action Variables -- 
   Action -- 
      List:
      -----
   Rule: (packet)
   Empty pattern
   Action Variables -- 
      Variable: local [local; width=8, addr=0]
   Action -- 
      List:
      -----
      Assignment to local
      Value -- 
         Binary Operation: 'binary OR' [[]; width=8]
         Left Operand -- 
            Scalar [[c,p]; width=8] -- width 8: 8 (8,0x8)
         Right Operand -- 
            Locator: packet field(tcp) [[v]; width=0]
            Reserved packet field (parse)
            Offset -- 
               Scalar [[c]; width=8] -- width 8: 5 (5,0x5)
            Length -- 
               Scalar [[c]; width=8] -- width 8: 2 (2,0x2)
      -----
   Rule: (packet)
   Pattern -- 
      Locator: packet field(ip) [[]; width=8]
      Reserved packet field (exists)
   Action Variables -- 
      Variable: a [local; width=8, addr=0]
      Variable: i [local; width=8, addr=1]
      Variable: csum [local; width=8, addr=2]
   Action -- 
      List:
      -----
      Assignment to a
      Value -- 
         Scalar [[c]; width=8] -- width 8: 0 (0,0x0)
      -----
      Assignment to i
      Value -- 
         Scalar [[c]; width=8] -- width 8: 0 (0,0x0)
      -----
      Assignment to csum
      Value -- 
         Scalar [[c]; width=8] -- width 8: 0 (0,0x0)
      -----
      While Statement
      Loop Test -- 
         Binary Operation: 'less than' [[]; width=8]
         Left Operand -- 
            Locator: variable(i) [[]; width=8]
            Variable -- 
               Variable: i [local; width=8, addr=1]
         Right Operand -- 
            Locator: packet field(ip.hlen) [[]; width=8]
            Reserved packet field (hlen)
      Loop Body -- 
         List:
         -----
         Assignment to csum
         Value -- 
            Binary Operation: 'add' [[]; width=8]
            Left Operand -- 
               Locator: variable(csum) [[]; width=8]
               Variable -- 
                  Variable: csum [local; width=8, addr=2]
            Right Operand -- 
               Locator: packet field(tcp) [[v]; width=0]
               Reserved packet field (parse)
               Offset -- 
                  Locator: variable(i) [[]; width=8]
                  Variable -- 
                     Variable: i [local; width=8, addr=1]
               Length -- 
                  Scalar [[c]; width=8] -- width 8: 2 (2,0x2)
         -----
         Assignment to i
         Value -- 
            Binary Operation: 'add' [[]; width=8]
            Left Operand -- 
               Locator: variable(i) [[]; width=8]
               Variable -- 
                  Variable: i [local; width=8, addr=1]
            Right Operand -- 
               Scalar [[c]; width=8] -- width 8: 2 (2,0x2)
         -----
      -----
      While Statement
      Loop Test -- 
         Binary Operation: 'greater than' [[]; width=8]
         Left Operand -- 
            Locator: variable(csum) [[]; width=8]
            Variable -- 
               Variable: csum [local; width=8, addr=2]
         Right Operand -- 
            Scalar [[c]; width=8] -- width 8: 65535 (65535,0xffff)
      Loop Body -- 
         List:
         -----
         Assignment to csum
         Value -- 
            Binary Operation: 'binary AND' [[]; width=8]
            Left Operand -- 
               Binary Operation: 'add' [[]; width=8]
               Left Operand -- 
                  Binary Operation: 'binary AND' [[]; width=8]
                  Left Operand -- 
                     Locator: variable(csum) [[]; width=8]
                     Variable -- 
                        Variable: csum [local; width=8, addr=2]
                  Right Operand -- 
                     Scalar [[c]; width=8] -- width 8: 65535 (65535,0xffff)
               Right Operand -- 
                  Binary Operation: 'shift right' [[]; width=8]
                  Left Operand -- 
                     Locator: variable(csum) [[]; width=8]
                     Variable -- 
                        Variable: csum [local; width=8, addr=2]
                  Right Operand -- 
                     Scalar [[c]; width=8] -- width 8: 16 (16,0x10)
            Right Operand -- 
               Scalar [[c]; width=8] -- width 8: 65535 (65535,0xffff)
         -----
      -----
      If Statement
      Test -- 
         Binary Operation: 'not equals' [[]; width=8]
         Left Operand -- 
            Binary Operation: 'binary AND' [[]; width=8]
            Left Operand -- 
               Binary Operation: 'add' [[]; width=8]
               Left Operand -- 
                  Locator: variable(csum) [[]; width=8]
                  Variable -- 
                     Variable: csum [local; width=8, addr=2]
               Right Operand -- 
                  Locator: packet field(ip) [[v]; width=0]
                  Reserved packet field (parse)
                  Offset -- 
                     Scalar [[c]; width=8] -- width 8: 10 (10,0xa)
                  Length -- 
                     Scalar [[c]; width=8] -- width 8: 2 (2,0x2)
            Right Operand -- 
               Scalar [[c]; width=8] -- width 8: 65535 (65535,0xffff)
         Right Operand -- 
            Scalar [[c]; width=8] -- width 8: 0 (0,0x0)
      True body -- 
         List:
         -----
         Print Statement: type: string, width:0, flags:[]
         Expression -- 
            Byte string [[c]; width=0] -- 
            12 bytes in read-only segment at address 27
            4261642063686563
            6b73756d
         -----
      False body -- 
         List:
         -----
         Print Statement: type: string, width:0, flags:[]
         Expression -- 
            Byte string [[c]; width=0] -- 
            13 bytes in read-only segment at address 40
            476f6f6420636865
            636b73756d
         -----
      -----
      Assignment to ip.daddr
      Value -- 
         Byte string [[c]; width=0] -- 
         4 bytes in read-only segment at address 54
         20304050
      -----
      Assignment to a
      Value -- 
         Binary Operation: 'match' [[]; width=8]
         Left Operand -- 
            Locator: packet field(ip.saddr) [[]; width=4]
            Packet field
         Right Operand -- 
            Byte string [[c,p]; width=0] -- 
            4 bytes in read-only segment at address 58
            7f000001
      -----
      Assignment to a
      Value -- 
         Binary Operation: 'match' [[]; width=8]
         Left Operand -- 
            Locator: packet field(ip.saddr) [[]; width=4]
            Packet field
         Right Operand -- 
            Masked Pattern [[c,p]; width=0] 
            Value --
            4 bytes in read-only segment at address 62
            7f000000
            Mask --
            4 bytes in read-only segment at address 66
            ff000000
      -----
-----------
End Rule
-----------
   (null)
-----------


########
Clearing tree:
########
