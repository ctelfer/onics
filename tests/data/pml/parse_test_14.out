#########
Initializing parse data structures
#########
#########
Starting Parse
#########


########
Done parsing, destroying scanner and parser
########


########
Optimizing tree:
########
Done... printing optimized tree
Printing PML Abstract Syntax Tree
-----------
Variables
-----------
   Variable: mem [global; width=0, addr=0]
-----------
Functions
-----------
   Function[intrinsic]: str_len() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: str_addr() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: str_ispkt() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: str_seg() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: str_isnull() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: str_mkref() -- 4 args, 0-byte stack, return type=string reference
   Parameters & Variables -- 
      Variable: ispkt [param; width=4, addr=0]
      Variable: seg [param; width=4, addr=4]
      Variable: addr [param; width=4, addr=8]
      Variable: len [param; width=4, addr=12]
   Body -- 
      (null)
   Function[intrinsic]: pkt_new() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: len [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: pkt_new_z() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: len [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: pkt_swap() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pndst [param; width=4, addr=0]
      Variable: pnsrc [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: pkt_copy() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pndst [param; width=4, addr=0]
      Variable: pnsrc [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: pkt_ins_u() -- 3 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: off [param; width=4, addr=4]
      Variable: len [param; width=4, addr=8]
   Body -- 
      (null)
   Function[intrinsic]: pkt_ins_d() -- 3 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: off [param; width=4, addr=4]
      Variable: len [param; width=4, addr=8]
   Body -- 
      (null)
   Function[intrinsic]: pkt_cut_u() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: str [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: pkt_cut_d() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: str [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: pkt_parse() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: pkt_get_off() -- 4 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: prid [param; width=4, addr=4]
      Variable: idx [param; width=4, addr=8]
      Variable: oid [param; width=4, addr=12]
   Body -- 
      (null)
   Function[intrinsic]: pkt_adj_off() -- 5 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: prid [param; width=4, addr=4]
      Variable: idx [param; width=4, addr=8]
      Variable: oid [param; width=4, addr=12]
      Variable: amt [param; width=4, addr=16]
   Body -- 
      (null)
   Function[intrinsic]: pkt_nlists() -- 0 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
   Body -- 
      (null)
   Function[intrinsic]: pkt_lempty() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: list [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: pkt_enq() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: list [param; width=4, addr=0]
      Variable: pnum [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: pkt_deq() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: list [param; width=4, addr=0]
      Variable: pnum [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: pkt_push() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: list [param; width=4, addr=0]
      Variable: pnum [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: pkt_pop() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: list [param; width=4, addr=0]
      Variable: pnum [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: parse_push_back() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: prid [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: parse_pop_back() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_push_front() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: prid [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: parse_pop_front() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_update() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: prp_insert() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=4, addr=0]
      Variable: prid [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: prp_delete() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_dltype() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_len() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_lens() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_csum() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_csums() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_ts_sec() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_ts_nsec() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_ts() -- 3 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: sec [param; width=4, addr=4]
      Variable: nsec [param; width=4, addr=8]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_presnap() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_presnap() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: val [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_inport() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_inport() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: val [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_outport() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_outport() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: val [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_flowid() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_flowid() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: val [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_class() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_class() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: val [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_seq() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_seq() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: val [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: meta_has() -- 2 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: type [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: meta_add() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: type [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: meta_add_info() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: numw [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: meta_rem() -- 2 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: type [param; width=4, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: meta_rd8() -- 3 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: type [param; width=4, addr=4]
      Variable: off [param; width=4, addr=8]
   Body -- 
      (null)
   Function[intrinsic]: meta_rd16() -- 3 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: type [param; width=4, addr=4]
      Variable: off [param; width=4, addr=8]
   Body -- 
      (null)
   Function[intrinsic]: meta_rd32() -- 3 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: type [param; width=4, addr=4]
      Variable: off [param; width=4, addr=8]
   Body -- 
      (null)
   Function[intrinsic]: meta_wr8() -- 4 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: type [param; width=4, addr=4]
      Variable: off [param; width=4, addr=8]
      Variable: val [param; width=4, addr=12]
   Body -- 
      (null)
   Function[intrinsic]: meta_wr16() -- 4 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: type [param; width=4, addr=4]
      Variable: off [param; width=4, addr=8]
      Variable: val [param; width=4, addr=12]
   Body -- 
      (null)
   Function[intrinsic]: meta_wr32() -- 4 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=4, addr=0]
      Variable: type [param; width=4, addr=4]
      Variable: off [param; width=4, addr=8]
      Variable: val [param; width=4, addr=12]
   Body -- 
      (null)
   Function[intrinsic]: exit() -- 1 args, 0-byte stack, return type=void
   Parameters & Variables -- 
      Variable: rval [param; width=4, addr=0]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: pop() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: num [param; width=4, addr=0]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: log2() -- 1 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: num [param; width=4, addr=0]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: min() -- 2 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: num1 [param; width=4, addr=0]
      Variable: num2 [param; width=4, addr=4]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: max() -- 2 args, 0-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: num1 [param; width=4, addr=0]
      Variable: num2 [param; width=4, addr=4]
   Body -- 
      (null)
   Function: foo() -- 1 args, 8-byte stack, return type=scalar
   Parameters & Variables -- 
      Variable: x [param; width=4, addr=0]
      Variable: y [local; width=4, addr=0]
      Variable: z [local; width=4, addr=4]
   Body -- 
      List:
      -----
      Assignment to y
      Value -- 
         Binary Operation: 'subtract' [[]; width=4]
         Left Operand -- 
            Locator: variable(x) [[]; width=4]
            Variable -- 
               Variable: x [param; width=4, addr=0]
         Right Operand -- 
            Scalar [[c]; width=4] -- width 4: 1 (1,0x1)
      -----
      Assignment to z
      Value -- 
         Binary Operation: 'subtract' [[]; width=4]
         Left Operand -- 
            Locator: variable(x) [[]; width=4]
            Variable -- 
               Variable: x [param; width=4, addr=0]
         Right Operand -- 
            Scalar [[c]; width=4] -- width 4: 2 (2,0x2)
      -----
      Control Flow Modification: 'return'
         Binary Operation: 'add' [[]; width=4]
         Left Operand -- 
            Binary Operation: 'add' [[]; width=4]
            Left Operand -- 
               Locator: variable(x) [[]; width=4]
               Variable -- 
                  Variable: x [param; width=4, addr=0]
            Right Operand -- 
               Locator: variable(y) [[]; width=4]
               Variable -- 
                  Variable: y [local; width=4, addr=0]
         Right Operand -- 
            Locator: variable(z) [[]; width=4]
            Variable -- 
               Variable: z [local; width=4, addr=4]
      -----
-----------
Begin Rule
-----------
   Rule: (begin)
      Action Variables -- 
   Action -- 
      List:
      -----
      Print Statement: type: string, width:0, flags:[]
      Expression -- 
         Byte string [[c]; width=0] -- 
         10 bytes in read-only segment at address 0
         666f6f2831302920
         3d20
      -----
      Print Statement: type: signed decimal, width:0, flags:[n]
      Expression -- 
         Function call to: foo [[]; width=4]
         Arguments -- 
            List:
            -----
            Scalar [[c]; width=4] -- width 4: 10 (10,0xa)
            -----
      -----
-----------
Packet Rules
-----------
-----------
Tick Rule
-----------
   (null)
-----------
-----------
End Rule
-----------
   (null)
-----------


########
Clearing tree:
########
