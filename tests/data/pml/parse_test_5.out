#########
Initializing parse data structures
#########
#########
Starting Parse
#########


########
Done parsing, destroying scanner and parser
########


########
Optimizing tree:
########
Done... printing optimized tree
Printing PML Abstract Syntax Tree
-----------
Variables
-----------
   Variable: mem [global; width=0, addr=0]
-----------
Functions
-----------
   Function[intrinsic]: pkt_new() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: len [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_swap() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pndst [param; width=8, addr=0]
      Variable: pnsrc [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_copy() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pndst [param; width=8, addr=0]
      Variable: pnsrc [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_del() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: pkt_ins_u() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_ins_d() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_cut_u() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_cut_d() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_parse() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_push_back() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: prid [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: parse_pop_back() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_push_front() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: prid [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: parse_pop_front() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_update() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_dltype() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_len() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_all_len() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_csum() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_all_csum() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_tstamp() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_tstamp() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_presnap() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_presnap() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_inport() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_inport() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_outport() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_outport() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_flowid() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_flowid() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_class() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_class() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: pop() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num [param; width=8, addr=0]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: log2() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num [param; width=8, addr=0]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: min() -- 2 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num1 [param; width=8, addr=0]
      Variable: num2 [param; width=8, addr=1]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: max() -- 2 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num1 [param; width=8, addr=0]
      Variable: num2 [param; width=8, addr=1]
   Body -- 
      (null)
   Function: true() -- 0 args, 0 vars, return type=scalar
   Parameters & Variables -- 
   Body -- 
      List:
      -----
      While Statement
      Loop Test -- 
         Scalar [[c]; width=8] -- width 8: 1 (1,0x1)
      Loop Body -- 
         List:
         -----
         Control Flow Modification: 'return'
            Scalar [[c]; width=8] -- width 8: 1 (1,0x1)
         -----
      -----
-----------
Begin Rule
-----------
   Rule: (begin)
      Action Variables -- 
      Variable: i [local; width=8, addr=0]
   Action -- 
      List:
      -----
      Assignment to i
      Value -- 
         Scalar [[c]; width=8] -- width 8: 0 (0,0x0)
      -----
      While Statement
      Loop Test -- 
         Binary Operation: 'less than' [[]; width=8]
         Left Operand -- 
            Locator: variable(i) [[]; width=8]
            Variable -- 
               Variable: i [local; width=8, addr=0]
         Right Operand -- 
            Scalar [[c]; width=8] -- width 8: 5 (5,0x5)
      Loop Body -- 
         List:
         -----
         If Statement
         Test -- 
            Binary Operation: 'equals' [[]; width=8]
            Left Operand -- 
               Locator: variable(i) [[]; width=8]
               Variable -- 
                  Variable: i [local; width=8, addr=0]
            Right Operand -- 
               Scalar [[c]; width=8] -- width 8: 3 (3,0x3)
         True body -- 
            List:
            -----
            Control Flow Modification: 'break'
            -----
         -----
         If Statement
         Test -- 
            Binary Operation: 'equals' [[]; width=8]
            Left Operand -- 
               Locator: variable(i) [[]; width=8]
               Variable -- 
                  Variable: i [local; width=8, addr=0]
            Right Operand -- 
               Scalar [[c]; width=8] -- width 8: 2 (2,0x2)
         True body -- 
            List:
            -----
            Control Flow Modification: 'continue'
            -----
         -----
      -----
-----------
Packet Rules
-----------
   Rule: (packet)
   Pattern -- 
      Scalar [[c]; width=8] -- width 8: 1 (1,0x1)
   Action Variables -- 
   Action -- 
      List:
      -----
      Control Flow Modification: 'nextrule'
      -----
   Rule: (packet)
   Pattern -- 
      Locator: packet field(ip) [[]; width=8]
      Reserved packet field (exists)
   Action Variables -- 
      Variable: i [local; width=8, addr=0]
      Variable: x [local; width=8, addr=1]
   Action -- 
      List:
      -----
      Assignment to i
      Value -- 
         Scalar [[c]; width=8] -- width 8: 1 (1,0x1)
      -----
      Assignment to x
      Value -- 
         Locator: packet field(tcp) [[]; width=8]
         Reserved packet field (exists)
         Packet -- 
            Scalar [[c]; width=8] -- width 8: 0 (0,0x0)
      -----
      If Statement
      Test -- 
         Function call to: true [[]; width=8]
         Arguments -- 
            List:
            -----
      True body -- 
         List:
         -----
         Control Flow Modification: 'drop'
         -----
      -----
      Control Flow Modification: 'sendpkt'
      -----
   Rule: (packet)
   Pattern -- 
      Locator: packet field(ip) [[]; width=8]
      Reserved packet field (exists)
   Action Variables -- 
      Variable: i [local; width=8, addr=0]
      Variable: x [local; width=8, addr=1]
   Action -- 
      List:
      -----
      Assignment to i
      Value -- 
         Scalar [[c]; width=8] -- width 8: 1 (1,0x1)
      -----
      Assignment to x
      Value -- 
         Locator: packet field(tcp) [[]; width=8]
         Reserved packet field (exists)
         Packet -- 
            Scalar [[c]; width=8] -- width 8: 0 (0,0x0)
      -----
      If Statement
      Test -- 
         Binary Operation: 'logical AND' [[]; width=8]
         Left Operand -- 
            Scalar [[c]; width=8] -- width 8: 1 (1,0x1)
         Right Operand -- 
            Function call to: true [[]; width=8]
            Arguments -- 
               List:
               -----
      True body -- 
         List:
         -----
         Control Flow Modification: 'drop'
         -----
      -----
      Control Flow Modification: 'sendpkt'
      -----
   Rule: (packet)
   Pattern -- 
      Locator: packet field(ip) [[]; width=8]
      Reserved packet field (exists)
   Action Variables -- 
      Variable: i [local; width=8, addr=0]
      Variable: x [local; width=8, addr=1]
   Action -- 
      List:
      -----
      Assignment to i
      Value -- 
         Scalar [[c]; width=8] -- width 8: 1 (1,0x1)
      -----
      Assignment to x
      Value -- 
         Locator: packet field(tcp) [[]; width=8]
         Reserved packet field (exists)
         Packet -- 
            Scalar [[c]; width=8] -- width 8: 0 (0,0x0)
         Header Index -- 
            Locator: variable(i) [[]; width=8]
            Variable -- 
               Variable: i [local; width=8, addr=0]
      -----
      If Statement
      Test -- 
         Binary Operation: 'logical AND' [[]; width=8]
         Left Operand -- 
            Scalar [[c]; width=8] -- width 8: 1 (1,0x1)
         Right Operand -- 
            Function call to: true [[]; width=8]
            Arguments -- 
               List:
               -----
      True body -- 
         List:
         -----
         Control Flow Modification: 'drop'
         -----
      -----
      Control Flow Modification: 'sendpkt'
      -----
   Rule: (packet)
   Pattern -- 
      Locator: packet field(ip) [[]; width=8]
      Reserved packet field (exists)
   Action Variables -- 
      Variable: i [local; width=8, addr=0]
   Action -- 
      List:
      -----
      Assignment to i
      Value -- 
         Scalar [[c]; width=8] -- width 8: 1 (1,0x1)
      -----
      If Statement
      Test -- 
         Binary Operation: 'logical AND' [[]; width=8]
         Left Operand -- 
            Locator: packet field(tcp) [[]; width=8]
            Reserved packet field (exists)
            Packet -- 
               Scalar [[c]; width=8] -- width 8: 0 (0,0x0)
            Header Index -- 
               Locator: variable(i) [[]; width=8]
               Variable -- 
                  Variable: i [local; width=8, addr=0]
         Right Operand -- 
            Function call to: true [[]; width=8]
            Arguments -- 
               List:
               -----
      True body -- 
         List:
         -----
         Control Flow Modification: 'drop'
         -----
      -----
      Control Flow Modification: 'sendpkt'
      -----
-----------
End Rule
-----------
   (null)
-----------


########
Clearing tree:
########
