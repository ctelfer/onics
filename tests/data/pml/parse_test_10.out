#########
Initializing parse data structures
#########
#########
Starting Parse
#########


########
Done parsing, destroying scanner and parser
########


########
Optimizing tree:
########
Done... printing optimized tree
Printing PML Abstract Syntax Tree
-----------
Variables
-----------
   Variable: mem [global; width=0, addr=0]
-----------
Functions
-----------
   Function[intrinsic]: str_len() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=16, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: str_addr() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=16, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: str_ispkt() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=16, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: str_seg() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=16, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: str_isnull() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: ref [param; width=16, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: str_mkref() -- 4 args, 0 vars, return type=string reference
   Parameters & Variables -- 
      Variable: ispkt [param; width=8, addr=0]
      Variable: seg [param; width=8, addr=1]
      Variable: addr [param; width=8, addr=2]
      Variable: len [param; width=8, addr=3]
   Body -- 
      (null)
   Function[intrinsic]: pkt_new() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: len [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_new_z() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: len [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_swap() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pndst [param; width=8, addr=0]
      Variable: pnsrc [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_copy() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pndst [param; width=8, addr=0]
      Variable: pnsrc [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_del() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: pkt_ins_u() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_ins_d() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_cut_u() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: str [param; width=16, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: pkt_cut_d() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: str [param; width=16, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: pkt_parse() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: pkt_get_off() -- 4 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: prid [param; width=8, addr=1]
      Variable: idx [param; width=8, addr=2]
      Variable: oid [param; width=8, addr=3]
   Body -- 
      (null)
   Function[intrinsic]: pkt_adj_off() -- 5 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: prid [param; width=8, addr=1]
      Variable: idx [param; width=8, addr=2]
      Variable: oid [param; width=8, addr=3]
      Variable: amt [param; width=8, addr=4]
   Body -- 
      (null)
   Function[intrinsic]: parse_push_back() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: prid [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: parse_pop_back() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_push_front() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: prid [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: parse_pop_front() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_update() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_dltype() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_len() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_all_len() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_csum() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_all_csum() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_tstamp() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_tstamp() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_presnap() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_presnap() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_inport() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_inport() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_outport() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_outport() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_flowid() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_flowid() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_class() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_class() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: pop() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num [param; width=8, addr=0]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: log2() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num [param; width=8, addr=0]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: min() -- 2 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num1 [param; width=8, addr=0]
      Variable: num2 [param; width=8, addr=1]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: max() -- 2 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num1 [param; width=8, addr=0]
      Variable: num2 [param; width=8, addr=1]
   Body -- 
      (null)
   Function: fib() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: x [param; width=8, addr=0]
   Body -- 
      List:
      -----
      If Statement
      Test -- 
         Binary Operation: 'less than' [[]; width=8]
         Left Operand -- 
            Locator: variable(x) [[]; width=8]
            Variable -- 
               Variable: x [param; width=8, addr=0]
         Right Operand -- 
            Scalar [[c]; width=8] -- width 8: 2 (2,0x2)
      True body -- 
         List:
         -----
         Control Flow Modification: 'return'
            Scalar [[c]; width=8] -- width 8: 0 (0,0x0)
         -----
      -----
      Control Flow Modification: 'return'
         Binary Operation: 'add' [[]; width=8]
         Left Operand -- 
            Function call to: fib [[]; width=8]
            Arguments -- 
               List:
               -----
               Binary Operation: 'subtract' [[]; width=8]
               Left Operand -- 
                  Locator: variable(x) [[]; width=8]
                  Variable -- 
                     Variable: x [param; width=8, addr=0]
               Right Operand -- 
                  Scalar [[c]; width=8] -- width 8: 1 (1,0x1)
               -----
         Right Operand -- 
            Function call to: fib [[]; width=8]
            Arguments -- 
               List:
               -----
               Binary Operation: 'subtract' [[]; width=8]
               Left Operand -- 
                  Locator: variable(x) [[]; width=8]
                  Variable -- 
                     Variable: x [param; width=8, addr=0]
               Right Operand -- 
                  Scalar [[c]; width=8] -- width 8: 2 (2,0x2)
               -----
      -----
   Function: fib2a() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: x [param; width=8, addr=0]
   Body -- 
      List:
      -----
      If Statement
      Test -- 
         Binary Operation: 'less than' [[]; width=8]
         Left Operand -- 
            Locator: variable(x) [[]; width=8]
            Variable -- 
               Variable: x [param; width=8, addr=0]
         Right Operand -- 
            Scalar [[c]; width=8] -- width 8: 2 (2,0x2)
      True body -- 
         List:
         -----
         Control Flow Modification: 'return'
            Scalar [[c]; width=8] -- width 8: 0 (0,0x0)
         -----
      -----
      Control Flow Modification: 'return'
         Binary Operation: 'add' [[]; width=8]
         Left Operand -- 
            Function call to: fib2b [[]; width=8]
            Arguments -- 
               List:
               -----
               Locator: variable(x) [[]; width=8]
               Variable -- 
                  Variable: x [param; width=8, addr=0]
               -----
         Right Operand -- 
            Function call to: fib2c [[]; width=8]
            Arguments -- 
               List:
               -----
               Locator: variable(x) [[]; width=8]
               Variable -- 
                  Variable: x [param; width=8, addr=0]
               -----
      -----
   Function: fib2b() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: x [param; width=8, addr=0]
   Body -- 
      List:
      -----
      Control Flow Modification: 'return'
         Function call to: fib2a [[]; width=8]
         Arguments -- 
            List:
            -----
            Binary Operation: 'subtract' [[]; width=8]
            Left Operand -- 
               Locator: variable(x) [[]; width=8]
               Variable -- 
                  Variable: x [param; width=8, addr=0]
            Right Operand -- 
               Scalar [[c]; width=8] -- width 8: 1 (1,0x1)
            -----
      -----
   Function: fib2c() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: x [param; width=8, addr=0]
   Body -- 
      List:
      -----
      Control Flow Modification: 'return'
         Function call to: fib2b [[]; width=8]
         Arguments -- 
            List:
            -----
            Binary Operation: 'subtract' [[]; width=8]
            Left Operand -- 
               Locator: variable(x) [[]; width=8]
               Variable -- 
                  Variable: x [param; width=8, addr=0]
            Right Operand -- 
               Scalar [[c]; width=8] -- width 8: 1 (1,0x1)
            -----
      -----
-----------
Begin Rule
-----------
   Rule: (begin)
      Action Variables -- 
   Action -- 
      List:
      -----
      If Statement
      Test -- 
         Binary Operation: 'equals' [[]; width=8]
         Left Operand -- 
            Function call to: fib [[]; width=8]
            Arguments -- 
               List:
               -----
               Scalar [[c]; width=8] -- width 8: 7 (7,0x7)
               -----
         Right Operand -- 
            Scalar [[c]; width=8] -- width 8: 21 (21,0x15)
      True body -- 
         List:
         -----
         Print Statement: type: string, width:0, flags:[]
         Expression -- 
            Byte string [[c]; width=0] -- 
            16 bytes in read-only segment at address 0
            676f742066696228
            3729203d3d203231
         -----
      -----
      If Statement
      Test -- 
         Binary Operation: 'equals' [[]; width=8]
         Left Operand -- 
            Function call to: fib2a [[]; width=8]
            Arguments -- 
               List:
               -----
               Scalar [[c]; width=8] -- width 8: 7 (7,0x7)
               -----
         Right Operand -- 
            Scalar [[c]; width=8] -- width 8: 21 (21,0x15)
      True body -- 
         List:
         -----
         Print Statement: type: string, width:0, flags:[]
         Expression -- 
            Byte string [[c]; width=0] -- 
            16 bytes in read-only segment at address 17
            676f742066696228
            3729203d3d203231
         -----
      -----
-----------
Packet Rules
-----------
-----------
End Rule
-----------
   (null)
-----------


########
Clearing tree:
########
