#########
Initializing parse data structures
#########
#########
Starting Parse
#########


########
Done parsing, destroying scanner and parser
########


########
Optimizing tree:
########
Done... printing optimized tree
Printing PML Abstract Syntax Tree
-----------
Variables
-----------
   Variable: mem [global; width=0, addr=0]
-----------
Functions
-----------
   Function[intrinsic]: pkt_new() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: len [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_swap() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pndst [param; width=8, addr=0]
      Variable: pnsrc [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_copy() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pndst [param; width=8, addr=0]
      Variable: pnsrc [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: pkt_del() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: pkt_ins_u() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_ins_d() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_cut_u() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_cut_d() -- 3 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: off [param; width=8, addr=1]
      Variable: len [param; width=8, addr=2]
   Body -- 
      (null)
   Function[intrinsic]: pkt_parse() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_push_back() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: prid [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: parse_pop_back() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_push_front() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: prid [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: parse_pop_front() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: parse_update() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_dltype() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_len() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_all_len() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_csum() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pdesc [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: fix_all_csum() -- 1 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_tstamp() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_tstamp() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_presnap() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_presnap() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_inport() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_inport() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_outport() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_outport() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_flowid() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_flowid() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[intrinsic]: meta_get_class() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
   Body -- 
      (null)
   Function[intrinsic]: meta_set_class() -- 2 args, 0 vars, return type=void
   Parameters & Variables -- 
      Variable: pnum [param; width=8, addr=0]
      Variable: val [param; width=8, addr=1]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: pop() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num [param; width=8, addr=0]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: log2() -- 1 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num [param; width=8, addr=0]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: min() -- 2 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num1 [param; width=8, addr=0]
      Variable: num2 [param; width=8, addr=1]
   Body -- 
      (null)
   Function[inline, intrinsic, pconst]: max() -- 2 args, 0 vars, return type=scalar
   Parameters & Variables -- 
      Variable: num1 [param; width=8, addr=0]
      Variable: num2 [param; width=8, addr=1]
   Body -- 
      (null)
-----------
Begin Rule
-----------
   (null)
-----------
Packet Rules
-----------
   Rule: (packet)
   Pattern -- 
      Binary Operation: 'multiply' [[]; width=8]
      Left Operand -- 
         Binary Operation: 'add' [[]; width=8]
         Left Operand -- 
            Binary Operation: 'equals' [[]; width=8]
            Left Operand -- 
               Locator: packet field(tcp.plen) [[]; width=8]
               Reserved packet field (plen)
            Right Operand -- 
               Locator: packet field(ip.hlen) [[]; width=8]
               Reserved packet field (hlen)
         Right Operand -- 
            Binary Operation: 'subtract' [[]; width=8]
            Left Operand -- 
               Locator: packet field(udp.plen) [[]; width=8]
               Reserved packet field (plen)
            Right Operand -- 
               Locator: packet field(tcp.tlen) [[]; width=8]
               Reserved packet field (tlen)
      Right Operand -- 
         Binary Operation: 'modulus' [[]; width=8]
         Left Operand -- 
            Binary Operation: 'shift left' [[]; width=8]
            Left Operand -- 
               Binary Operation: 'divide' [[]; width=8]
               Left Operand -- 
                  Locator: packet field(ip6.error) [[]; width=8]
                  Reserved packet field (error)
               Right Operand -- 
                  Locator: packet field(ip.prid) [[]; width=8]
                  Reserved packet field (prid)
            Right Operand -- 
               Binary Operation: 'shift right' [[]; width=8]
               Left Operand -- 
                  Locator: packet field(icmp.index) [[]; width=8]
                  Reserved packet field (index)
               Right Operand -- 
                  Locator: packet field(icmp.header) [[v]; width=0]
                  Reserved packet field (header)
         Right Operand -- 
            Binary Operation: 'binary AND' [[]; width=8]
            Left Operand -- 
               Binary Operation: 'binary XOR' [[]; width=8]
               Left Operand -- 
                  Locator: packet field(icmp6.payload) [[v]; width=0]
                  Reserved packet field (payload)
               Right Operand -- 
                  Locator: packet field(tcp.trailer) [[v]; width=0]
                  Reserved packet field (trailer)
            Right Operand -- 
               Binary Operation: 'binary OR' [[]; width=8]
               Left Operand -- 
                  Locator: packet field(ip.df) [[]; width=8]
                  Packet field
               Right Operand -- 
                  Locator: packet field(tcp.syn) [[]; width=8]
                  Packet field
   Action Variables -- 
   Action -- 
      List:
      -----
-----------
End Rule
-----------
   (null)
-----------


########
Clearing tree:
########
